namespace Wrapped/Modifier {
    pub def toString(x0: Int32): String & Pure = {
        import static java.lang.reflect.Modifier.toString(Int32): & Pure;
        toString(x0)
    }
    
    
    pub def isInterface(x0: Int32): Bool & Pure = {
        import static java.lang.reflect.Modifier.isInterface(Int32): & Pure;
        isInterface(x0)
    }
    
    
    pub def classModifiers(): Int32 & Pure = {
        import static java.lang.reflect.Modifier.classModifiers(): & Pure;
        classModifiers()
    }
    
    
    pub def isStatic(x0: Int32): Bool & Pure = {
        import static java.lang.reflect.Modifier.isStatic(Int32): & Pure;
        isStatic(x0)
    }
    
    
    pub def isPublic(x0: Int32): Bool & Pure = {
        import static java.lang.reflect.Modifier.isPublic(Int32): & Pure;
        isPublic(x0)
    }
    
    
    pub def isProtected(x0: Int32): Bool & Pure = {
        import static java.lang.reflect.Modifier.isProtected(Int32): & Pure;
        isProtected(x0)
    }
    
    
    pub def methodModifiers(): Int32 & Pure = {
        import static java.lang.reflect.Modifier.methodModifiers(): & Pure;
        methodModifiers()
    }
    
    
    pub def constructorModifiers(): Int32 & Pure = {
        import static java.lang.reflect.Modifier.constructorModifiers(): & Pure;
        constructorModifiers()
    }
    
    
    pub def isFinal(x0: Int32): Bool & Pure = {
        import static java.lang.reflect.Modifier.isFinal(Int32): & Pure;
        isFinal(x0)
    }
    
    
    pub def isAbstract(x0: Int32): Bool & Pure = {
        import static java.lang.reflect.Modifier.isAbstract(Int32): & Pure;
        isAbstract(x0)
    }
    
    
    pub def isVolatile(x0: Int32): Bool & Pure = {
        import static java.lang.reflect.Modifier.isVolatile(Int32): & Pure;
        isVolatile(x0)
    }
    
    
    pub def isPrivate(x0: Int32): Bool & Pure = {
        import static java.lang.reflect.Modifier.isPrivate(Int32): & Pure;
        isPrivate(x0)
    }
    
    
    pub def isNative(x0: Int32): Bool & Pure = {
        import static java.lang.reflect.Modifier.isNative(Int32): & Pure;
        isNative(x0)
    }
    
    
    pub def isSynchronized(x0: Int32): Bool & Pure = {
        import static java.lang.reflect.Modifier.isSynchronized(Int32): & Pure;
        isSynchronized(x0)
    }
    
    
    pub def isTransient(x0: Int32): Bool & Pure = {
        import static java.lang.reflect.Modifier.isTransient(Int32): & Pure;
        isTransient(x0)
    }
    
    
    pub def isStrict(x0: Int32): Bool & Pure = {
        import static java.lang.reflect.Modifier.isStrict(Int32): & Pure;
        isStrict(x0)
    }
    
    
    pub def interfaceModifiers(): Int32 & Pure = {
        import static java.lang.reflect.Modifier.interfaceModifiers(): & Pure;
        interfaceModifiers()
    }
    
    
    pub def fieldModifiers(): Int32 & Pure = {
        import static java.lang.reflect.Modifier.fieldModifiers(): & Pure;
        fieldModifiers()
    }
    
    
    pub def parameterModifiers(): Int32 & Pure = {
        import static java.lang.reflect.Modifier.parameterModifiers(): & Pure;
        parameterModifiers()
    }
    
    
    pub def getPUBLIC(): Int32 & Pure = {
        import static  get java.lang.reflect.Modifier.PUBLIC: & Pure as getPUBLIC;
        getPUBLIC()
    }
    
    
    pub def getPRIVATE(): Int32 & Pure = {
        import static  get java.lang.reflect.Modifier.PRIVATE: & Pure as getPRIVATE;
        getPRIVATE()
    }
    
    
    pub def getPROTECTED(): Int32 & Pure = {
        import static  get java.lang.reflect.Modifier.PROTECTED: & Pure as getPROTECTED;
        getPROTECTED()
    }
    
    
    pub def getSTATIC(): Int32 & Pure = {
        import static  get java.lang.reflect.Modifier.STATIC: & Pure as getSTATIC;
        getSTATIC()
    }
    
    
    pub def getFINAL(): Int32 & Pure = {
        import static  get java.lang.reflect.Modifier.FINAL: & Pure as getFINAL;
        getFINAL()
    }
    
    
    pub def getSYNCHRONIZED(): Int32 & Pure = {
        import static  get java.lang.reflect.Modifier.SYNCHRONIZED: & Pure as getSYNCHRONIZED;
        getSYNCHRONIZED()
    }
    
    
    pub def getVOLATILE(): Int32 & Pure = {
        import static  get java.lang.reflect.Modifier.VOLATILE: & Pure as getVOLATILE;
        getVOLATILE()
    }
    
    
    pub def getTRANSIENT(): Int32 & Pure = {
        import static  get java.lang.reflect.Modifier.TRANSIENT: & Pure as getTRANSIENT;
        getTRANSIENT()
    }
    
    
    pub def getNATIVE(): Int32 & Pure = {
        import static  get java.lang.reflect.Modifier.NATIVE: & Pure as getNATIVE;
        getNATIVE()
    }
    
    
    pub def getINTERFACE(): Int32 & Pure = {
        import static  get java.lang.reflect.Modifier.INTERFACE: & Pure as getINTERFACE;
        getINTERFACE()
    }
    
    
    pub def getABSTRACT(): Int32 & Pure = {
        import static  get java.lang.reflect.Modifier.ABSTRACT: & Pure as getABSTRACT;
        getABSTRACT()
    }
    
    
    pub def getSTRICT(): Int32 & Pure = {
        import static  get java.lang.reflect.Modifier.STRICT: & Pure as getSTRICT;
        getSTRICT()
    }
}
